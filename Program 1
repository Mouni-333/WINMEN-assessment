Directory Structure
crm-system/
├── models/
│   └── index.js
├── routes/
│   └── index.js
├── controllers/
│   └── index.js
├── config/
│   └── database.js
├── app.js
├── server.js
├── package.json
└── package-lock.json

Here's a consolidated version of the entire code in one file. For brevity and ease of assessment, I'll simplify some parts but maintain all essential functionalities.


crm-system/
├── models/
│   └── index.js
├── routes/
│   └── index.js
├── controllers/
│   └── index.js
├── config/
│   └── database.js
├── app.js
├── server.js
├── package.json
└── package-lock.json
package.json

{
  "name": "crm-system",
  "version": "1.0.0",
  "main": "server.js",
  "dependencies": {
    "body-parser": "^1.19.0",
    "cors": "^2.8.5",
    "express": "^4.17.1",
    "pg": "^8.6.0",
    "pg-hstore": "^2.3.3",
    "sequelize": "^6.6.2"
  },
  "devDependencies": {
    "nodemon": "^2.0.7"
  },
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js"
  }
}


const { Sequelize } = require('sequelize');

const sequelize = new Sequelize('crm', 'username', 'password', {
  host: 'localhost',
  dialect: 'postgres',
});

module.exports = sequelize;

const Sequelize = require('sequelize');
const sequelize = require('../config/database');

const Customer = sequelize.define('Customer', {
  customer_id: { type: Sequelize.INTEGER, autoIncrement: true, primaryKey: true },
  name: Sequelize.STRING,
  email: Sequelize.STRING,
  phone: Sequelize.STRING,
  address: Sequelize.STRING,
  created_at: { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  updated_at: { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
});

const Contact = sequelize.define('Contact', {
  contact_id: { type: Sequelize.INTEGER, autoIncrement: true, primaryKey: true },
  customer_id: { type: Sequelize.INTEGER, references: { model: 'Customers', key: 'customer_id' } },
  name: Sequelize.STRING,
  email: Sequelize.STRING,
  phone: Sequelize.STRING,
  position: Sequelize.STRING,
  created_at: { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  updated_at: { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
});

const Opportunity = sequelize.define('Opportunity', {
  opportunity_id: { type: Sequelize.INTEGER, autoIncrement: true, primaryKey: true },
  customer_id: { type: Sequelize.INTEGER, references: { model: 'Customers', key: 'customer_id' } },
  title: Sequelize.STRING,
  description: Sequelize.TEXT,
  stage: Sequelize.STRING,
  value: Sequelize.FLOAT,
  close_date: Sequelize.DATE,
  created_at: { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  updated_at: { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
});

const Interaction = sequelize.define('Interaction', {
  interaction_id: { type: Sequelize.INTEGER, autoIncrement: true, primaryKey: true },
  customer_id: { type: Sequelize.INTEGER, references: { model: 'Customers', key: 'customer_id' } },
  contact_id: { type: Sequelize.INTEGER, references: { model: 'Contacts', key: 'contact_id' } },
  type: Sequelize.STRING,
  date: Sequelize.DATE,
  notes: Sequelize.TEXT,
  created_at: { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  updated_at: { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
});

// Associations
Customer.hasMany(Contact, { foreignKey: 'customer_id' });
Customer.hasMany(Opportunity, { foreignKey: 'customer_id' });
Customer.hasMany(Interaction, { foreignKey: 'customer_id' });
Contact.hasMany(Interaction, { foreignKey: 'contact_id' });

sequelize.sync();

module.exports = { sequelize, Customer, Contact, Opportunity, Interaction };

const { Customer, Contact, Opportunity, Interaction } = require('../models');

exports.getAllCustomers = async (req, res) => {
  try {
    const customers = await Customer.findAll();
    res.json(customers);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.getCustomerById = async (req, res) => {
  try {
    const customer = await Customer.findByPk(req.params.id);
    res.json(customer);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.createCustomer = async (req, res) => {
  try {
    const customer = await Customer.create(req.body);
    res.json(customer);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.updateCustomer = async (req, res) => {
  try {
    const customer = await Customer.findByPk(req.params.id);
    await customer.update(req.body);
    res.json(customer);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.deleteCustomer = async (req, res) => {
  try {
    const customer = await Customer.findByPk(req.params.id);
    await customer.destroy();
    res.json({ message: 'Customer deleted' });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.getAllContacts = async (req, res) => {
  try {
    const contacts = await Contact.findAll();
    res.json(contacts);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.getContactById = async (req, res) => {
  try {
    const contact = await Contact.findByPk(req.params.id);
    res.json(contact);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.createContact = async (req, res) => {
  try {
    const contact = await Contact.create(req.body);
    res.json(contact);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.updateContact = async (req, res) => {
  try {
    const contact = await Contact.findByPk(req.params.id);
    await contact.update(req.body);
    res.json(contact);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.deleteContact = async (req, res) => {
  try {
    const contact = await Contact.findByPk(req.params.id);
    await contact.destroy();
    res.json({ message: 'Contact deleted' });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.getAllOpportunities = async (req, res) => {
  try {
    const opportunities = await Opportunity.findAll();
    res.json(opportunities);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.getOpportunityById = async (req, res) => {
  try {
    const opportunity = await Opportunity.findByPk(req.params.id);
    res.json(opportunity);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.createOpportunity = async (req, res) => {
  try {
    const opportunity = await Opportunity.create(req.body);
    res.json(opportunity);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.updateOpportunity = async (req, res) => {
  try {
    const opportunity = await Opportunity.findByPk(req.params.id);
    await opportunity.update(req.body);
    res.json(opportunity);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.deleteOpportunity = async (req, res) => {
  try {
    const opportunity = await Opportunity.findByPk(req.params.id);
    await opportunity.destroy();
    res.json({ message: 'Opportunity deleted' });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.getAllInteractions = async (req, res) => {
  try {
    const interactions = await Interaction.findAll();
    res.json(interactions);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.getInteractionById = async (req, res) => {
  try {
    const interaction = await Interaction.findByPk(req.params.id);
    res.json(interaction);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.createInteraction = async (req, res) => {
  try {
    const interaction = await Interaction.create(req.body);
    res.json(interaction);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.updateInteraction = async (req, res) => {
  try {
    const interaction = await Interaction.findByPk(req.params.id);
    await interaction.update(req.body);
    res.json(interaction);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.deleteInteraction = async (req, res) => {
  try {
   
